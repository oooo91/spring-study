plugins {
    id 'java'
    id 'war'
}

group = 'hello'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    //서블릿 implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    //스프링 mvc 추가
    implementation 'org.springframework:spring-webmvc:6.0.4'

    //내장 톰캣 추가
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.5'
}

tasks.named('test') {
    useJUnitPlatform()
}

/**
 * 이번에는 애플리케이션에 내장 톰캣을 라이브러리로 포함했다.
 * 이 코드를 어떻게 빌드하고 배포하는지 알아보자.
 * 자바의 main() 메서드를 실행하기 위해서는 jar 형식으로 빌드해야 한다.

 * 다음 위치에 jar 파일이 만들어졌을 것이다.
 build/libs/embed-0.0.1-SNAPSHOT.jar

 * jar 파일 실행
 * jar 파일이 있는 폴더로 이동한 후에 다음 명령어로 jar 파일을 실행해보자.
 * java -jar embed-0.0.1-SNAPSHOT.jar

 * 그런데 실행 결과를 보면 기대했던 내장 톰캣 서버가 실행되는 것이 아니라, 오류가 발생하는 것을 확인할 수 있다.
 *  오류 메시지를 잘 읽어보면 스프링 관련 클래스를 찾을 수 없다는 오류이다.

 * 무엇이 문제일까
 * JAR를 푼 결과를 보면 스프링 라이브러리나 내장 톰캣 라이브러리가 전혀 보이지 않는다. 라이브러리가 하나도 없는 순수 자바만 jar 로 만들어진 것이다.
 * 왜 이러나? jar 파일은 jar파일을 포함할 수 없다.

 * WAR와 다르게 JAR 파일은 내부에 라이브러리 역할을 하는 JAR 파일을 포함할 수 없다.
 * 포함한다고 해도 인식이 안된다. 이것이 JAR 파일 스펙의 한계이다.
 * 그렇다고 WAR를 사용할 수 도 없다. WAR는 웹 애플리케이션 서버(WAS) 위에서만 실행할 수 있다.

 * 대안으로는 라이브러리 jar 파일을 모두 구해서 MANIFEST 파일에 해당 경로를 적어주면 인식이 되지만 매우 번거롭고,
 * Jar 파일안에 Jar 파일을 포함할 수 없기 때문에 라이브러리 역할을 하는 jar 파일도 항상 함께 가지고 다녀야 한다.
 * 이 방법은 권장하기 않기 때문에 따로 설명하지 않는다.

 * 대안으로는 fat jar 또는 uber jar 라고 불리는 방법이다.
 * Jar 안에는 Jar를 포함할 수 없다. 하지만 클래스는 얼마든지 포함할 수 있다.
 * 라이브러리에 사용되는 jar 를 풀면 class 들이 나온다. 이 class 를 뽑아서 새로 만드는 jar 에 포함하는 것이다.
 * 이렇게 하면 수 많은 라이브러리에서 나오는 class 때문에 뚱뚱한(fat) jar 가 탄생한다. 그래서 Fat Jar 라고 부르는 것이다
 */
task buildJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'hello.embed.EmbedTomcatSpringMain'
    }
    with jar
}

//Fat jar 생성
task buildFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'hello.embed.EmbedTomcatSpringMain' //실행 위치
    }
    duplicatesStrategy = DuplicatesStrategy.WARN
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it :
                    zipTree(it)
        }
    }
    with jar
}