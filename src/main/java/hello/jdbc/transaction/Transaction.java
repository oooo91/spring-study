package hello.jdbc.transaction;

public class Transaction {
    /**
     * 트랜잭션을 더 자세히 이해하기 위해 데이터베이스 서버 연결 구조와 DB 세션에 대해 알아보자.
     * 데이터베이스 연결 구조 1
     * 사용자는 웹 애플리케이션 서버(WAS)나 DB 접근 툴 같은 클라이언트를 사용해서 데이터베이스 서버에 접근할 수 있다.
     * 클라이언트는 데이터베이스 서버에 연결을 요청하고 커넥션을 맺게 된다.
     * 이때 데이터베이스 서버는 내부에 세션이라는 것을 만든다.
     * 그리고 앞으로 해당 커넥션을 통한 모든 요청은 이 세션을 통해서 실행하게 된다. (각 커넥션 당 세션 만들어진다.)
     * 쉽게 이야기해서 개발자가 클라이언트를 통해 SQL을 전달하면 현재 커넥션에 연결된 세션이 SQL을 실행한다.

     * 세션은 트랜잭션을 시작하고, 커밋 또는 롤백을 통해 트랜잭션을 종료한다.
     * 그리고 이후에 새로운 트랜잭션을 다시 시작할 수 있다.
     * 사용자가 커넥션을 닫거나, 또는 DBA(DB 관리자)가 세션을 강제로 종료하면 세션은 종료된다.

     * 데이터베이스 연결 구조 2
     * 커넥션 풀이 10개의 커넥션을 생성하면, 세션도 10개 만들어진다.
     * 세션1은 트랜잭션을 시작하고 신규 회원1, 신규 회원2를 DB에 추가했다. 아직 커밋은 하지 않은 상태이다.
     * 새로운 데이터는 임시 상태로 저장된다.
     * 세션1은 select 쿼리를 실행해서 본인이 입력한 신규 회원1, 신규 회원2를 조회할 수 있다.
     * 세션2는 select 쿼리를 실행해도 신규 회원들을 조회할 수 없다. 왜냐하면 세션1이 아직 커밋을 하지 않았기 때문이다.
     * 세션1이 신규 데이터를 추가한 후에 commit 을 호출했다.
     * commit 으로 새로운 데이터가 실제 데이터베이스에 반영된다. 데이터의 상태도 임시 완료로 변경되었다.
     * 이제 다른 세션에서도 회원 테이블을 조회하면 신규 회원들을 확인할 수 있다.

     * 자동 커밋 (기본값)
     * 트랜잭션을 사용하려면 먼저 자동 커밋과 수동 커밋을 이해해야 한다.
     * 자동 커밋으로 설정하면 각각의 쿼리 실행 직후에 자동으로 커밋을 호출한다.
     * 따라서 커밋이나 롤백을 직접 호출하지 않아도 되는 편리함이 있다.
     * 하지만 쿼리를 하나하나 실행할 때 마다 자동으로 커밋이 되어버리기 때문에 우리가 원하는 트랜잭션 기능을 제대로 사용할 수 없다.

     * 자동 커밋 설정
     * set autocommit true; //자동 커밋 모드 설정
     * insert into member(member_id, money) values ('data1',10000); //자동 커밋
     * insert into member(member_id, money) values ('data2',10000); //자동 커밋
     * 따라서 commit , rollback 을 직접 호출하면서 트랜잭션 기능을 제대로 수행하려면 자동 커밋을 끄고 수동 커밋을 사용해야 한다.

     * 수동 커밋 설정
     * set autocommit false; //수동 커밋 모드 설정
     * insert into member(member_id, money) values ('data3',10000);
     * insert into member(member_id, money) values ('data4',10000);
     * commit; //수동 커밋

     * 보통 자동 커밋 모드가 기본으로 설정된 경우가 많기 때문에, 수동 커밋 모드로 설정하는 것을 트랜잭션을 시작한다고 표현할 수 있다.
     * 수동 커밋 설정을 하면 이후에 꼭 commit , rollback 을 호출해야 한다.
     * 참고로 수동 커밋 모드나 자동 커밋 모드는 한번 설정하면 해당 세션에서는 계속 유지된다. 중간에 변경하는것은 가능하다.

     * Transaction 예제 - 계좌이체
     * A가 B에게 2000원 이체를 하려고 한다. (A의 자산) - 2000원과 (B의 자산) + 2000원이 실행되어야한다.
     * 그런데 (B의 자산) + 2000원 쿼리 실행에서 오류가 발생하여 A의 자산만 빠진 상태다.
     * 여기서 COMMIT을 실행하면 A의 돈만 빠져나가기 때문에 ROLLBACK을 하여 COMMIT 전으로 돌아가야한다.
     */
}
